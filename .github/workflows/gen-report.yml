name: Generate report

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      jobset:
        required: true
        type: string
      nuke-cache:
        required: false
        type: string
        default: false

env:
  project: ${{ inputs.project }}
  jobset: ${{ inputs.jobset }}

# Wait for jobs for same report from previous workflow runs to finish.
# Docs: https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency: ${{ inputs.project }}:${{ inputs.jobset }}

jobs:
  wait-for-rm-reports:
    name: Wait for rm-reports
    uses: ./.github/workflows/wait-for-workflow.yml
    with:
      workflow-id: rm-reports.yml

  get-eval-info:
    name: Get eval info
    runs-on: ubuntu-latest
    needs: wait-for-rm-reports

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v14

    # This steps gets the following values:
    # * eval_id: the ID of the jobset evaluation we are generating the report for.
    # * eval-status: `sucesses` or a unique id (this is used in creating cache ids)
    - name: Get eval info
      run: |
        eval_id=$(nix run .#jobset-latest-eval-id -- $project $jobset)
        success_eval_id=$(nix run .#jobset-latest-successful-eval-id -- $project $jobset)
        echo "eval_id=$eval_id" >> $GITHUB_ENV
        if [ "$eval_id" = 'null' ]; then
          echo "::warning::Could not retrieve evaluation ID for $project:$jobset jobset"
        elif [ "$eval_id" = "$success_eval_id" ]; then
          echo "eval_status=success" >> $GITHUB_ENV
        else
          echo "eval_status=${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_ENV
        fi

    outputs:
      eval-id: ${{ env.eval_id }}
      eval-status: ${{ env.eval_status }}

  generante-report:
    name: Generate report
    runs-on: ubuntu-latest
    needs: get-eval-info
    env:
      eval_id: ${{ needs.get-eval-info.outputs.eval-id }}
      eval_status: ${{ needs.get-eval-info.outputs.eval-status }}

    # Don't run if we weren't able to get an ID for the latest evaluation of the jobset. This
    # usually happens if the jobset has never been evaluated.
    if: ${{ needs.get-eval-info.outputs.eval-id != 'null' }}

    steps:
    # Always checkout the `master` branch so that we have the most up to date version of the repo
    # since other runs of this workflow might have pushed before we run.
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: master

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v14

    # Get the most up-to-date cache of the `data` directory containing Hydra build reports
    # downloaded by `nix-review-reports` for the jobset.
    #
    # We should only ever get a exact hit on the key if a previous workflow generated a report for
    # this jobset evaluation after that evaluation finished/succeeded.
    #
    # When we don't get an exact hit, we first try to restore the most recent cache for this jobset
    # evaluation, if there isn't a cache for this evaluation we restore the most recent cache for a
    # previous evaluation of this jobset.
    #
    # cache action docs:
    # https://github.com/actions/cache
    - name: Restore cache
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: data
        key: "${{ env.project }}:${{ env.jobset }}-eval:${{ env.eval_id }}-success"
        restore-keys: |
          ${{ env.project }}:${{ env.jobset }}-eval:${{ env.eval_id }}-
          ${{ env.project }}:${{ env.jobset }}-eval:
          ${{ env.project }}:${{ env.jobset }}-

    # Sometimes we may want to nuke the cache, like when builds were restarted on Hydra.
    - name: Nuke cache
      if: inputs.nuke-cache == 'true'
      run: |
        rm -rf data

    # Generate the report only if we don't have an exact cache hit. If we do have an exact cache hit
    # that means that we already generated a report for the jobset evaluation after the evaluation
    # succeeded/finished, and so the report is already up-to-date.
    #
    # We retry a couple times on failure since sometimes this step fails due to transient issues
    # downloading reports from Hydra and similar.
    - name: Generate report
      id: generate-report
      if: steps.restore-cache.outputs.cache-hit != 'true'
      uses: nick-fields/retry@v3
      continue-on-error: true
      with:
        timeout_minutes: 60
        max_attempts: 3
        command: nix run . -- $project $jobset

    # Push new/updated report only if we don't have an exact cache hit for the same reasons as
    # above, and if the report was updated and there were more changes then just an update to the
    # "Report built at ..." line.
    #
    # We check if there are actually any substantial changes to push. Example contents of `stats`
    # array: `1 files changed, 230 insertions(+), 24628 deletions(-)`, where `stats[3]` is `230` and
    # `stats[5]` is `24628`.
    #
    # If both are equal to 1, this indicates that this was an update to a report for a jobset
    # evaluation that's still in progress, but that no additional queued builds completed since
    # the report was last generated, and so the only update to the report is an update to the
    # "Report built at ..." line. If that's the case, we don't commit and push that change.
    #
    # We need to pull and rebase before we push since another run of this workflow maybe have pushed
    # changes since we cloned the repo.
    - name: Push new/updated report
      if: steps.restore-cache.outputs.cache-hit != 'true' && steps.generate-report.outcome == 'success'
      run: |
        stats=($(git diff --shortstat))
        if [ "${stats[3]}" -eq 1 ] && [ "${stats[5]}" -eq 1 ]; then
          echo "No changes to push"
          exit 0
        fi
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add --all
        git commit -m "Add/update $project:$jobset report for eval $eval_id"
        until git push
        do
          git pull --rebase=true
        done

    - name: Save cache
      uses: actions/cache/save@v4
      if: steps.restore-cache.outputs.cache-hit != 'true'
      with:
        path: data
        key: "${{ env.project }}:${{ env.jobset }}-eval:${{ env.eval_id }}-${{ env.eval_status }}"
